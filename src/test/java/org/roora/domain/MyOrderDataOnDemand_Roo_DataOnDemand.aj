// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.roora.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.roora.domain.MyOrder;
import org.roora.domain.Person;
import org.roora.domain.PersonDataOnDemand;
import org.roora.domain.Store;
import org.roora.domain.StoreDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MyOrderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MyOrderDataOnDemand: @Component;
    
    private Random MyOrderDataOnDemand.rnd = new SecureRandom();
    
    private List<MyOrder> MyOrderDataOnDemand.data;
    
    @Autowired
    private PersonDataOnDemand MyOrderDataOnDemand.personDataOnDemand;
    
    @Autowired
    private StoreDataOnDemand MyOrderDataOnDemand.storeDataOnDemand;
    
    public MyOrder MyOrderDataOnDemand.getNewTransientMyOrder(int index) {
        MyOrder obj = new MyOrder();
        setCreated(obj, index);
        setDescription(obj, index);
        setPerson(obj, index);
        setStore(obj, index);
        return obj;
    }
    
    public void MyOrderDataOnDemand.setCreated(MyOrder obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void MyOrderDataOnDemand.setDescription(MyOrder obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void MyOrderDataOnDemand.setPerson(MyOrder obj, int index) {
        Person person = personDataOnDemand.getRandomPerson();
        obj.setPerson(person);
    }
    
    public void MyOrderDataOnDemand.setStore(MyOrder obj, int index) {
        Store store = storeDataOnDemand.getRandomStore();
        obj.setStore(store);
    }
    
    public MyOrder MyOrderDataOnDemand.getSpecificMyOrder(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        MyOrder obj = data.get(index);
        return MyOrder.findMyOrder(obj.getId());
    }
    
    public MyOrder MyOrderDataOnDemand.getRandomMyOrder() {
        init();
        MyOrder obj = data.get(rnd.nextInt(data.size()));
        return MyOrder.findMyOrder(obj.getId());
    }
    
    public boolean MyOrderDataOnDemand.modifyMyOrder(MyOrder obj) {
        return false;
    }
    
    public void MyOrderDataOnDemand.init() {
        data = MyOrder.findMyOrderEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'MyOrder' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.roora.domain.MyOrder>();
        for (int i = 0; i < 10; i++) {
            MyOrder obj = getNewTransientMyOrder(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
